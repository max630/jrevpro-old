/*
 * @(#)JCpDialog.java
 *
 * JReversePro - Java Decompiler / Disassembler.
 * Copyright (C) 2000 Karthik Kumar.
 * EMail: akarthikkumar@hotmail.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it , under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.If not, write to
 *  The Free Software Foundation, Inc.,
 *  59 Temple Place - Suite 330,
 *  Boston, MA 02111-1307, USA.
 */
package jreversepro.gui;

import javax.swing.JScrollPane;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollBar;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

import java.awt.BorderLayout;
import java.awt.Dimension;

import jreversepro.reflect.JConstantPool;

/**
 * JCpDialog is the Dialog containing the ConstantPool contents.
 * @author Karthik Kumar
 * @version 1.3
 **/
public class JCpDialog extends JDialog
        implements ActionListener ,
                      MouseListener {

    /**
     * mCpTable Table representation of ConstantPool
     **/
    private JPoolTable  mCpTable;

    /**
     * mScrPoolData ScrollPane view for the Table mCpTable.
     **/
    private JScrollPane mScrPoolData;

    /**
     * mPnlList Panel containing the buttons to propagate
     * across the pointers of the ConstantPool.
     **/
    private JCustomListPanel mPnlList;

    /**
     * mEntries Maximum number of ConstantPoolEntries.
     **/
    private int mEntries;

    /**
     * @param aParent Parent Frame
     * @param aClassName Name of the Class/interface.
     * @param aCpInfo Constant Pool information.
     **/
    public JCpDialog( JFrame aParent,
                            String aClassName ,
                            JConstantPool aCpInfo
                         )
                         {

        super( aParent , "ConstantPool: "
                        + aClassName , true );

        mEntries = aCpInfo.getMaxCpEntry();

        mCpTable =  new JPoolTable(aCpInfo);
        mPnlList          = new JCustomListPanel(mEntries);
        mScrPoolData  = new JScrollPane(mCpTable );

        setLocation(100,100);
        setSize(600 , 225 );


        //addComponents
        getContentPane().setLayout( new BorderLayout() );
        getContentPane().add( mPnlList ,
                                        BorderLayout.NORTH );

        mScrPoolData.setPreferredSize(new Dimension(400, 100));
        getContentPane().add( mScrPoolData ,
                                        BorderLayout.SOUTH );

        setResizable(false);

        mPnlList.mBtnFind.addActionListener(this);
        mPnlList.mBtnGoto.addActionListener(this);

        mCpTable.addMouseListener(this);

        addWindowListener( new DlgClose() );
    }

    /**
     * ActionListener method.
     * @param aEvent Event generated by the ActionListener.
     **/
    public void actionPerformed( ActionEvent  aEvent) {
        if ( aEvent.getSource() == mPnlList.mBtnFind ) {
            findText();
        }
        else if ( aEvent.getSource() == mPnlList.mBtnGoto ) {
            gotoIndex( getCpIndex() );
        }
    }

    /**
     * MouseListener method.
     * @param aEvent Event generated by the MouseListener
     **/
    public void mouseClicked( MouseEvent aEvent ) {
        if ( aEvent.getSource() == mCpTable ) {
            int SelRow = mCpTable.getSelectedRow();
            int SelCol = mCpTable.getSelectedColumn();
            Object Obj = mCpTable.getValueAt(SelRow , SelCol );
            if (  Obj instanceof Integer ) {
                int IntValue = ((Integer)(Obj) ).intValue();
                gotoIndex( IntValue );
            }
        }
    }

    /**
     * MouseListener method.
     * @param aEvent Event generated by the MouseListener
     **/
    public void mouseEntered( MouseEvent aEvent ) { }

    /**
     * MouseListener method.
     * @param aEvent Event generated by the MouseListener
     **/
    public void mouseExited( MouseEvent aEvent ) { }

    /**
     * MouseListener method.
     * @param aEvent Event generated by the MouseListener
     **/
    public void mousePressed( MouseEvent aEvent ) { }

    /**
     * MouseListener method.
     * @param aEvent Event generated by the MouseListener
     **/
    public void mouseReleased( MouseEvent aEvent ) { }

    /**
     * Looks for the specified text in the ConstantPool entries.
     * Not yet implemented.
     **/
    private void findText() {

    }

    /**
     * Shifts the focus of the Table view of the ConstantPool to
     * the entry beginning with aTargetIndex.
     * @param aTargetIndex Index of the ConstantPool to be moved to.
     **/
    private void gotoIndex(int aTargetIndex) {
        int StepValue;
        int StartValue;

        JScrollBar VBar = mScrPoolData.getVerticalScrollBar();
        StepValue = ( VBar.getMaximum() - VBar.getMinimum() ) / mEntries;
        StartValue = VBar.getMinimum();
        VBar.setValue( StartValue + aTargetIndex * StepValue );
    }

    /**
     * Validates the data entered as ConstantPool and returns the
     * information.
     * @return the Index of the ConstantPool to be sought after.
     **/
    private int getCpIndex() {
        int InputValue;

        try {
            InputValue = Integer.parseInt(
                            mPnlList.mTxtIndex.getText() );

            if ( InputValue <= 0 ) {
                return 0;
            }
            else if ( InputValue >= mEntries ) {
                return mEntries;
            }
            else {
                return InputValue;
            }
        }
        catch( Exception e ) {
            return 0;
        }
    }
}
